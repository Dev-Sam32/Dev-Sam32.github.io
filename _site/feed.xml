<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-13T14:54:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sam’s DevLog</title><subtitle>dev-sam32&apos;s DevLog</subtitle><author><name>Hyunsang Shin</name><email>sam32.dev@gmail.com</email></author><entry><title type="html">[23/04/06] Inflearn_SpringCoreBasic 스프링 컨테이너와 스프링 빈</title><link href="http://localhost:4000/til/04_SpringContainer-SpringBean/" rel="alternate" type="text/html" title="[23/04/06] Inflearn_SpringCoreBasic 스프링 컨테이너와 스프링 빈" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/til/04_SpringContainer-SpringBean</id><content type="html" xml:base="http://localhost:4000/til/04_SpringContainer-SpringBean/"><![CDATA[<h1 id="섹션-4-스프링-컨테이너와-스프링-빈">섹션 4. 스프링 컨테이너와 스프링 빈</h1>

<h2 id="spring-container">Spring Container</h2>

<ul>
  <li>
    <p>ApplicationContext</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">AppConfig.class</code> 에 등록된 구성 정보를 통해 스프링 컨테이너 생성</li>
    </ul>
  </li>
  <li>
    <p>AppConfig.class</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
<span class="o">}</span>
  
<span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">OrderService</span> <span class="nf">orderService</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">(),</span> <span class="n">discountPolicy</span><span class="o">());</span>
<span class="o">}</span>
  
<span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
<span class="o">}</span>
  
<span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">DiscountPolicy</span> <span class="nf">discountPolicy</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">RateDiscountPolicy</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">memberService()</code>,<code class="language-plaintext highlighter-rouge">orderService()</code> -&gt; <code class="language-plaintext highlighter-rouge">memberRepository()</code>
        <ul>
          <li>2개의 서비스를 실행 시, 코드상으로는 2개 이상 인스턴스가 생성되어야 하지만 하나의 인스턴스가 생성 됨
            <ul>
              <li>스프링이 내부적으로 ‘싱글톤(Singleton) 패턴’으로 설계해줌</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>ApplicationContext &amp; BeanFactory</p>

    <ul>
      <li>
        <p>BeanFactory</p>

        <ul>
          <li>스프링 컨테이너 최상위 인터페이스</li>
          <li>스프링 빈 관리 및 조회 -&gt; <code class="language-plaintext highlighter-rouge">getBean()</code> 등 Bean 관련 메서드 제공</li>
        </ul>
      </li>
      <li>
        <p>ApplicationContext</p>

        <ul>
          <li>BeanFactory 기능 상속
            <ul>
              <li>MessageSorce</li>
              <li>EnvironmentCapable</li>
              <li>ApplicationEventPublisher</li>
              <li>ResourceLoader</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Hyunsang Shin</name><email>sam32.dev@gmail.com</email></author><category term="TIL" /><category term="TIL" /><category term="Spring" /></entry><entry><title type="html">[23/04/06] Inflearn_SpringCoreBasic 싱글톤 컨테이너</title><link href="http://localhost:4000/til/05_SingletonContainer-Configuration/" rel="alternate" type="text/html" title="[23/04/06] Inflearn_SpringCoreBasic 싱글톤 컨테이너" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/til/05_SingletonContainer-Configuration</id><content type="html" xml:base="http://localhost:4000/til/05_SingletonContainer-Configuration/"><![CDATA[<h1 id="섹션-5-싱글톤-컨테이너">섹션 5. 싱글톤 컨테이너</h1>

<h2 id="싱글톤-패턴singleton-pattern">싱글톤 패턴(Singleton Pattern)</h2>

<ul>
  <li>Class의 인스턴스가 단 하나만 생성되는 것을 보장하는 디자인 패턴
    <ul>
      <li>객체 인스턴스가 2개 이상 생성되지 못하도록 설정
        <ul>
          <li><code class="language-plaintext highlighter-rouge">private</code> 생성자를 사용해서 외부에서 new 키워드 사용을 막음</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>싱글톤 패턴의 문제점 ⚠️
    <ul>
      <li>싱글톤 패턴을 위한 코드 필요</li>
      <li>의존관계상 클라이언트가 구체 클래스에 의존 -&gt; DIP 위반, OCP원칙 위반 가능성</li>
      <li>Test 어려움, private 생성자 제약
        <ul>
          <li>유연성이 떨어짐</li>
        </ul>
      </li>
      <li>안티패턴으로 불리기도 함</li>
    </ul>
  </li>
</ul>

<h2 id="싱글톤-컨테이너singletone-container">싱글톤 컨테이너(SIngletone Container)</h2>

<ul>
  <li>싱글톤의 문제점을 해결하고, 객체 인스턴스를 싱글톤으로 관리해줌</li>
  <li>싱글톤 패턴 주의점⚠️
    <ul>
      <li>여러 클라이언트가 하나의 같은 객체를 공유하기 때문에 무상태(Stateless)로 설계해야함
        <ul>
          <li>특정 클라리언트에 의존적 필드 ❌</li>
          <li>특정 클라이언트가 값을 변경할 수 있는 필드 ❌</li>
          <li>가급적 읽기만 가능해야함(Read Only)</li>
        </ul>
      </li>
      <li>필드 대신 공유되지 않는 지역변수, 파라미터 등을 사용해야함</li>
    </ul>
  </li>
</ul>

<h2 id="configuration">@Configuration</h2>

<ul>
  <li>CGLIB 라이브러리를 통해 싱글톤을 보장 할 수 있도록 해줌</li>
</ul>]]></content><author><name>Hyunsang Shin</name><email>sam32.dev@gmail.com</email></author><category term="TIL" /><category term="TIL" /><category term="Spring" /></entry><entry><title type="html">[23/04/06] Inflearn_SpringCoreBasic 컴포넌트 스캔</title><link href="http://localhost:4000/til/06_ComponentScan/" rel="alternate" type="text/html" title="[23/04/06] Inflearn_SpringCoreBasic 컴포넌트 스캔" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/til/06_ComponentScan</id><content type="html" xml:base="http://localhost:4000/til/06_ComponentScan/"><![CDATA[<h1 id="섹션-6-컴포넌트-스캔">섹션 6. 컴포넌트 스캔</h1>

<h2 id="componentscan">@ComponentScan</h2>

<ul>
  <li>
    <p>설정 정보 없이 <code class="language-plaintext highlighter-rouge">@Component</code> 어노테이션이 붙은 클래스 스프링 빈으로 등록한다.
⚠️ <code class="language-plaintext highlighter-rouge">@Configuration</code> 안에 <code class="language-plaintext highlighter-rouge">@Component</code> 어노테이션이 붙어있기 때문에 따로 등록이 필요없다.</p>
  </li>
  <li>탐색 위치, 기본 스캔 대상 지정
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ComponentScan</span> <span class="o">{</span>
  <span class="n">basePackages</span> <span class="o">=</span> <span class="s">"hello.core"</span><span class="o">,</span> <span class="s">"hello.service"</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>탐색할 패키지의 시작 위치를 변경할 수 있다. ( 명시된 패키지를 포함한 하위 패키지 모두 스캔)</p>
      </li>
      <li>
        <p>Default) <code class="language-plaintext highlighter-rouge">@ComponentScan</code> 이 붙은 설정 정보 클래스의 패키지</p>

        <p>-&gt; 관례적으로 설정 정보 클래스의 위치를 프로젝트 최상단에 둔다고 한다.</p>

        <p>-&gt; <code class="language-plaintext highlighter-rouge">basePackages</code> 를 따로 지정하지 않아도 된다. -&gt; 생략 가능</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@Component</code>, <code class="language-plaintext highlighter-rouge">@Controller</code>, <code class="language-plaintext highlighter-rouge">@Service</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Configuration</code> 모두 스캔된다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">inclueFilters</code>, <code class="language-plaintext highlighter-rouge">excludeFilters</code> 로 스캔 대상 추가 or 제외를 지정할 수 있다.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ComponentScan</code> 시 동일명의 빈 등록으로 충돌이 난다면, 수동 등록 빈이 우선된다.</li>
</ul>

<h2 id="autowired">@Autowired</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ComponentScan</code> 사용시 의존관계 주입을 위해 생성자에 <code class="language-plaintext highlighter-rouge">@Autowired</code> 를 사용한다.(생성자 주입)</li>
</ul>]]></content><author><name>Hyunsang Shin</name><email>sam32.dev@gmail.com</email></author><category term="TIL" /><category term="TIL" /><category term="Spring" /></entry><entry><title type="html">[23/04/07] Inflearn_SpringCoreBasic 의존관계 자동 주입</title><link href="http://localhost:4000/til/07_SpringCoreBasic/" rel="alternate" type="text/html" title="[23/04/07] Inflearn_SpringCoreBasic 의존관계 자동 주입" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/til/07_SpringCoreBasic</id><content type="html" xml:base="http://localhost:4000/til/07_SpringCoreBasic/"><![CDATA[<h1 id="07-의존관계-자동-주입">07. 의존관계 자동 주입</h1>

<h2 id="의존관계-주입-방법">의존관계 주입 방법</h2>

<ul>
  <li>생성자 주입
    <ul>
      <li>생성자 호출 시점에서 한번 호출되는 것이 보장됨</li>
      <li>불변, 필수 의존관계에서 사용</li>
      <li>생성자가 하나일 경우, <code class="language-plaintext highlighter-rouge">@Autowired</code> 생략해도 자동 주입</li>
    </ul>
  </li>
  <li>수정자 주입(Setter)
    <ul>
      <li>선택, 변경 가능성이 있는 의존관계에서 사용</li>
    </ul>
  </li>
  <li>필드 주입
    <ul>
      <li>필드에서 바로 주입하는 방식</li>
      <li>코드가 간결하지만 외부 변경이 불가하여 테스트하기 힘듦</li>
      <li>테스트 코드, 스프링 설정 목적인 <code class="language-plaintext highlighter-rouge">@Configuration</code> 에서만 사용</li>
    </ul>
  </li>
  <li>일반 메서드 주입</li>
</ul>

<h2 id="생성자-주입-방식이-권장되는-이유">생성자 주입 방식이 권장되는 이유</h2>

<ul>
  <li>프레임워크에 의존적이지 않음</li>
  <li>생성자 주입을 기본으로 사용하고, 필수 값이 아닌 경우에 수정자 주입방식을 옵션으로 부여하면, 생성자 주입 방식과 수정자 주입방식을 동시에 사용 가능</li>
  <li>Lombok 라이브러리와 같이 사용하면 간결한 코드 작성 가능
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@RequiredArgsConstructor</code> : <code class="language-plaintext highlighter-rouge">final</code> 키워드가 붙은 필드만 모아서 생성자를 자동 생성</li>
      <li>생성자 1개(<code class="language-plaintext highlighter-rouge">@Autowired</code> 생략), Lombok 라이브러리를 통해 생성자 자동 생성을 이용한 방식</li>
    </ul>
  </li>
</ul>

<h2 id="조회-대상-빈이-2개-이상일-경우">조회 대상 빈이 2개 이상일 경우</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Autowired</code>는 타입으로 조회, 동일 타입 빈이 2개 이상일 경우
    <ul>
      <li>@Autowired 필드명 매칭 -&gt; 필드명을 빈 이름으로 변경</li>
      <li><code class="language-plaintext highlighter-rouge">@Qualifier</code>끼리 매칭 -&gt; 등록과 주입에 사용된 이름 매칭</li>
      <li><code class="language-plaintext highlighter-rouge">@Primary</code>사용 -&gt; <code class="language-plaintext highlighter-rouge">@Primary</code>붙은 빈에게 우선권</li>
    </ul>
  </li>
</ul>]]></content><author><name>Hyunsang Shin</name><email>sam32.dev@gmail.com</email></author><category term="TIL" /><category term="TIL" /><category term="Spring" /></entry></feed>